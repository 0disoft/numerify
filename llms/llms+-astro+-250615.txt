TITLE: Implementing User Sign-in Form in Astro
DESCRIPTION: This Astro page presents a sign-in form for existing users. It accepts email and password, sending them to the `/api/auth/signin` endpoint via POST. Before rendering, it checks for existing authentication tokens (access and refresh cookies) and redirects authenticated users to the dashboard.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/backend/supabase.mdx#_snippet_10

LANGUAGE: Astro
CODE:
```
---
import Layout from "../layouts/Layout.astro";

const { cookies, redirect } = Astro;

const accessToken = cookies.get("sb-access-token");
const refreshToken = cookies.get("sb-refresh-token");

if (accessToken && refreshToken) {
  return redirect("/dashboard");
}
---

<Layout title="Sign in">
  <h1>Sign in</h1>
  <p>New here? <a href="/register">Create an account</a></p>
  <form action="/api/auth/signin" method="post">
    <label for="email">Email</label>
    <input type="email" name="email" id="email" />
    <label for="password">Password</label>
    <input type="password" name="password" id="password" />
    <button type="submit">Login</button>
  </form>
</Layout>
```

----------------------------------------

TITLE: Defining getStaticPaths with Props in Astro
DESCRIPTION: This snippet defines the `getStaticPaths` function in an Astro dynamic route. It uses `import.meta.glob` to eagerly load all Markdown blog posts and then passes this `allPosts` data as `props` to each generated route, allowing the component template to access all post data.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/tutorial/5-astro-api/2.mdx#_snippet_1

LANGUAGE: Astro
CODE:
```
---
import BaseLayout from '../../layouts/BaseLayout.astro';

export async function getStaticPaths() {
  const allPosts = Object.values(import.meta.glob('../posts/*.md', { eager: true }));

  return [
    {params: {tag: "astro"}, props: {posts: allPosts}},
    {params: {tag: "successes"}, props: {posts: allPosts}},
    {params: {tag: "community"}, props: {posts: allPosts}},
    {params: {tag: "blogging"}, props: {posts: allPosts}},
    {params: {tag: "setbacks"}, props: {posts: allPosts}},
    {params: {tag: "learning in public"}, props: {posts: allPosts}}
  ];
}

const { tag } = Astro.params;
const { posts } = Astro.props;
---
```

----------------------------------------

TITLE: Creating First Astro Page (Astro)
DESCRIPTION: This Astro code snippet defines a basic `index.astro` page, demonstrating the component frontmatter (JavaScript/TypeScript) and the component template (HTML). It includes a console log that runs during build time and a simple 'Hello, World!' HTML structure with basic styling.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/install-and-setup.mdx#_snippet_12

LANGUAGE: astro
CODE:
```
---
// Welcome to Astro! Everything between these triple-dash code fences
// is your "component frontmatter". It never runs in the browser.
console.log('This runs in your terminal, not the browser!');
---
<!-- Below is your "component template." It's just HTML, but with
    some magic sprinkled in to help you build great templates. -->
<html>
  <body>
    <h1>Hello, World!</h1>
  </body>
</html>
<style>
  h1 {
    color: orange;
  }
</style>
```

----------------------------------------

TITLE: Creating an Astro Component Template with Script and HTML
DESCRIPTION: Demonstrates the structure of an Astro component, combining a frontmatter script for imports, variable declarations, and props access with an HTML template. Shows examples of using imported components, JavaScript expressions, and special Astro directives like `server:defer`, `client:visible`, and `class:list` for controlling rendering and hydration.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/basics/astro-components.mdx#_snippet_2

LANGUAGE: Astro
CODE:
```
---
// Your component script here!
import Banner from '../components/Banner.astro';
import Avatar from '../components/Avatar.astro';
import ReactPokemonComponent from '../components/ReactPokemonComponent.jsx';
const myFavoritePokemon = [/* ... */];
const { title } = Astro.props;
---
<!-- HTML comments supported! -->
{/* JS comment syntax is also valid! */}

<Banner />
<h1>Hello, world!</h1>

<!-- Use props and other variables from the component script: -->
<p>{title}</p>

<!-- Delay component rendering and provide fallback loading content: -->
<Avatar server:defer>
  <svg slot="fallback" class="generic-avatar" transition:name="avatar">...</svg>
</Avatar>

<!-- Include other UI framework components with a `client:` directive to hydrate: -->
<ReactPokemonComponent client:visible />

<!-- Mix HTML with JavaScript expressions, similar to JSX: -->
<ul>
  {myFavoritePokemon.map((data) => <li>{data.name}</li>)}
</ul>

<!-- Use a template directive to build class names from multiple strings or even objects! -->
<p class:list={["add", "dynamic", { classNames: true }]} />
```

----------------------------------------

TITLE: Dynamically Rendering Blog Posts in Astro
DESCRIPTION: This Astro code replaces static list items with a dynamic list generated by mapping over the `allPosts` array obtained from `import.meta.glob()`. It uses `post.url` for the link and `post.frontmatter.title` for the display text, leveraging Astro's built-in TypeScript support for type safety and automatic updates.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/tutorial/5-astro-api/1.mdx#_snippet_1

LANGUAGE: Astro
CODE:
```
---
import BaseLayout from '../layouts/BaseLayout.astro'
const allPosts = Object.values(import.meta.glob('./posts/*.md', { eager: true }));
const pageTitle = "My Astro Learning Blog";
---
<BaseLayout pageTitle={pageTitle}>
  <p>This is where I will post about my journey learning Astro.</p>
  <ul>
    <li><a href="/posts/post-1/">Post 1</a></li>
    <li><a href="/posts/post-2/">Post 2</a></li>
    <li><a href="/posts/post-3/">Post 3</a></li>

    {allPosts.map((post: any) => <li><a href={post.url}>{post.frontmatter.title}</a></li>)}
  </ul>
</BaseLayout>
```

----------------------------------------

TITLE: Using Variables in Astro Components
DESCRIPTION: Demonstrates how to declare a local JavaScript variable in the Astro component's frontmatter and inject its value into the HTML template using curly braces. This shows basic dynamic content rendering.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/astro-syntax.mdx#_snippet_0

LANGUAGE: Astro
CODE:
```
--- const name = "Astro"; ---\n<div>\n  <h1>Hello {name}!</h1>  <!-- Outputs <h1>Hello Astro!</h1> -->\n</div>
```

----------------------------------------

TITLE: Defining Content Collections in src/content.config.ts
DESCRIPTION: This TypeScript snippet demonstrates the basic structure of `src/content.config.ts`, the central file for configuring content collections in Astro. It shows how to import necessary utilities like `defineCollection` and `z`, import loaders, define individual collections, and then export them within a `collections` object for Astro to register.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/content-collections.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
// 1. Import utilities from `astro:content`
import { defineCollection, z } from 'astro:content';

// 2. Import loader(s)
import { glob, file } from 'astro/loaders';

// 3. Define your collection(s)
const blog = defineCollection({ /* ... */ });
const dogs = defineCollection({ /* ... */ });

// 4. Export a single `collections` object to register your collection(s)
export const collections = { blog, dogs };
```

----------------------------------------

TITLE: Mapping Contentful Entries to Astro Dynamic Paths and Props
DESCRIPTION: This snippet extends the `getStaticPaths` function to map fetched Contentful entries into an array of objects, each containing `params` for URL generation and `props` to pass data (title, HTML content, formatted date) to the Astro page component.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/contentful.mdx#_snippet_12

LANGUAGE: Astro
CODE:
```
---
import { contentfulClient } from "../../lib/contentful";
import { documentToHtmlString } from "@contentful/rich-text-html-renderer";
import type { BlogPost } from "../../lib/contentful";

export async function getStaticPaths() {
  const entries = await contentfulClient.getEntries<BlogPost>({
    content_type: "blogPost",
  });

  const pages = entries.items.map((item) => ({
    params: { slug: item.fields.slug },
    props: {
      title: item.fields.title,
      content: documentToHtmlString(item.fields.content),
      date: new Date(item.fields.date).toLocaleDateString(),
    },
  }));
  return pages;
}
---
```

----------------------------------------

TITLE: Passing Data to Pages with props in Astro getStaticPaths()
DESCRIPTION: This snippet demonstrates how to pass additional data to statically generated pages using the `props` key within `getStaticPaths()`. It fetches data from an API, maps it to `params` for routing, and passes the full `post` object as `props`. The page template then accesses this data via `Astro.props`, allowing for rich content display beyond just URL parameters.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/routing-reference.mdx#_snippet_5

LANGUAGE: Astro
CODE:
```
---
export async function getStaticPaths() {
  const response = await fetch('...');
  const data = await response.json();

  return data.map((post) => {
    return {
      params: { id: post.id },
      props: { post },
    };
  });
}

const { id } = Astro.params;
const { post } = Astro.props;
---
<h1>{id}: {post.name}</h1>
```

----------------------------------------

TITLE: Basic Astro Page Structure
DESCRIPTION: This example shows a basic Astro page (`.astro` file) that produces a complete HTML document. It includes the necessary `<html>`, `<head>`, and `<body>` tags. Astro automatically adds the `<!DOCTYPE html>` declaration if not explicitly included.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/fr/basics/astro-pages.mdx#_snippet_1

LANGUAGE: Astro
CODE:
```
---
---
<html lang="fr">
  <head>
    <title>Ma page d'accueil</title>
  </head>
  <body>
    <h1>Bienvenue sur mon site web !</h1>
  </body>
</html>
```

----------------------------------------

TITLE: Complete Astro Data Fetching and Component Rendering
DESCRIPTION: This complete Astro page integrates data fetching directly within the component's frontmatter, replacing the `getStaticProps` pattern from Next.js. It fetches Pokémon data from the PokéAPI and renders it using Astro's templating, wrapped by a `Layout` component. This snippet showcases the full migration, including data fetching and component structure.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/migrate-to-astro/from-nextjs.mdx#_snippet_18

LANGUAGE: astro
CODE:
```
---
import Layout from '../layouts/layout.astro';

const res = await fetch("https://pokeapi.co/api/v2/pokemon?limit=151");
const resJson = await res.json();
const pokemons = resJson.results.map(pokemon => {
    const name = pokemon.name;
    // https://pokeapi.co/api/v2/pokemon/1/
    const url = pokemon.url;
    const id = url.split("/")[url.split("/").length - 2];
    return {
        name,
        url,
        id
    }
});
---

<Layout>
  <ul class="plain-list pokeList">
      {pokemons.map((pokemon) => (
          <li class="pokemonListItem" key={pokemon.name}>
              <a class="pokemonContainer" href={`/pokemon/${pokemon.name}`}>
                  <p class="pokemonId">No. {pokemon.id}</p>
                  <img class="pokemonImage" src={`https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${pokemon.id}.png`} alt={`${pokemon.name} picture`}/>
                  <h2 class="pokemonName">{pokemon.name}</h2>
              </a>
          </li>
      ))}
  </ul>
</Layout>
```

----------------------------------------

TITLE: Linking Between Pages in Astro
DESCRIPTION: This snippet demonstrates how to create links between different pages in an Astro project. It uses a standard HTML `<a>` element with a URL path that is relative to the root domain, ensuring proper navigation across the site.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/basics/astro-pages.mdx#_snippet_0

LANGUAGE: Astro
CODE:
```
Read more <a href="/authors/sonali/">about Sonali</a>.
```

----------------------------------------

TITLE: Create a new Astro project with npm
DESCRIPTION: This command initializes a new Astro project using npm, guiding you through the setup process with a CLI wizard. It's the recommended way to begin a new Astro site, providing a quick start for development.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/getting-started.mdx#_snippet_0

LANGUAGE: sh
CODE:
```
# create a new project with npm
npm create astro@latest
```

----------------------------------------

TITLE: Setting Dynamic Attributes in Astro
DESCRIPTION: Shows how to use local variables or template literals within curly braces `{}` to dynamically set attributes on HTML elements or pass values as props to other components.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/fr/reference/astro-syntax.mdx#_snippet_1

LANGUAGE: Astro
CODE:
```
---
const name = "Astro";
---
<h1 class={name}>Les expressions d'attributs sont supportées</h1>

<MyComponent templateLiteralNameAttribute={`MonNomEst${name}`} />
```

----------------------------------------

TITLE: Creating Astro Project with Integrations (Shell)
DESCRIPTION: This snippet demonstrates how to create a new Astro project and simultaneously install specified integrations (e.g., React, Partytown) using the `create astro` command with the `--add` argument. It provides examples for npm, pnpm, and yarn package managers.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/install-and-setup.mdx#_snippet_2

LANGUAGE: shell
CODE:
```
# create a new project with React and Partytown
npm create astro@latest -- --add react --add partytown
```

LANGUAGE: shell
CODE:
```
# create a new project with React and Partytown
pnpm create astro@latest --add react --add partytown
```

LANGUAGE: shell
CODE:
```
# create a new project with React and Partytown
yarn create astro --add react --add partytown
```

----------------------------------------

TITLE: Defining Astro Component Props with TypeScript
DESCRIPTION: Explains how to use a TypeScript `interface Props` in the frontmatter script to define the expected types for component props. Astro automatically uses this interface for type checking. Also shows providing a default value for an optional prop during destructuring.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/basics/astro-components.mdx#_snippet_6

LANGUAGE: Astro
CODE:
```
---
// src/components/GreetingHeadline.astro
interface Props {
  name: string;
  greeting?: string;
}

const { greeting = "Hello", name } = Astro.props;
---
<h2>{greeting}, {name}!</h2>
```

----------------------------------------

TITLE: Defining Astro Component Props with TypeScript
DESCRIPTION: Explains how to define the type of component props using a TypeScript interface named Props. Astro automatically recognizes this interface in the frontmatter, providing type checking and editor support for the component's expected parameters. It also shows destructuring props with default values.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/zh-cn/basics/astro-components.mdx#_snippet_6

LANGUAGE: Astro
CODE:
```
---
// src/components/GreetingHeadline.astro
interface Props {
  name: string;
  greeting?: string;
}

const { greeting = "你好", name } = Astro.props;
---
<h2>{greeting}，{name}!</h2>
```

----------------------------------------

TITLE: Generating Individual Blog Posts with Astro Dynamic Routes
DESCRIPTION: This Astro dynamic routing page (`[slug].astro`) uses `getStaticPaths()` to pre-render individual blog post pages at build time. It fetches all posts from Cosmic CMS, creates a route for each post's slug, and passes the post data via `Astro.props`. The HTML markup then renders the post's title, cover image (using `astro:assets`), and rich text content, with `set:html` used for the rich text to correctly render HTML from Cosmic.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/cms/cosmic.mdx#_snippet_7

LANGUAGE: Astro
CODE:
```
--- 
// src/pages/blog/[slug].astro
import { getAllPosts } from '../../lib/cosmic'
import { Image } from 'astro:assets'

export async function getStaticPaths() {
  const data = (await getAllPosts()) || []

  return data.map((post) => {
    return {
      params: { slug: post.slug },
      props: { post }
    }
  })
}

const { post } = Astro.props
---

<article class="mx-auto max-w-screen-md pt-20">
  <section class="border-b pb-8">
    <h1 class="text-4xl font-bold">{post.title}</h1>
    <div class="my-4"></div>
    <span class="text-sm font-semibold">{post.metadata.author?.title}</span>
  </section>
  {
    post.metadata.cover_image && (
      <Image
        src={post.metadata.cover_image.imgix_url}
        format="webp"
        width={1200}
        height={675}
        aspectRatio={16 / 9}
        quality={50}
        alt={`Cover image for the blog ${post.title}`}
        class={'my-12 rounded-md shadow-lg'}
      />
    )
  }
  <div set:html={post.metadata.content} />
</article>
```

----------------------------------------

TITLE: Data Fetching in Astro Frontmatter
DESCRIPTION: This snippet shows various data fetching methods within an Astro component's frontmatter. It includes examples of using `getCollection` for content collections, `import.meta.glob` for local file imports, and `fetch` for remote API calls, all utilizing top-level await.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/migrate-to-astro/from-nextjs.mdx#_snippet_13

LANGUAGE: Astro
CODE:
```
---
import { getCollection } from 'astro:content';

// Get all `src/content/blog/` entries
const allBlogPosts = await getCollection('blog');

// Get all `src/pages/posts/` entries
const allPosts = Object.values(import.meta.glob('../pages/posts/*.md', { eager: true }));

const response = await fetch('https://randomuser.me/api/');
const data = await response.json();
const randomUser = data.results[0];
---
```

----------------------------------------

TITLE: Basic Astro Component Structure
DESCRIPTION: Illustrates the fundamental structure of an Astro component, separating the component script (JavaScript) using frontmatter delimiters (---) from the component template (HTML + JS expressions).
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/zh-cn/basics/astro-components.mdx#_snippet_0

LANGUAGE: Astro
CODE:
```
---
// 组件脚本（JavaScript）
---
<!-- 组件模板（HTML + JS 表达式）-->
```

----------------------------------------

TITLE: Fetching User Data in Astro Components
DESCRIPTION: This snippet demonstrates how an Astro component can use the global `fetch()` function to retrieve data from a remote REST API. The data is fetched at build time (or runtime in SSR mode) and can then be used directly in the component's HTML template or passed as props to other Astro or framework components.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/data-fetching.mdx#_snippet_0

LANGUAGE: Astro
CODE:
```
---
// src/components/User.astro
import Contact from "../components/Contact.jsx";
import Location from "../components/Location.astro";

const response = await fetch("https://randomuser.me/api/");
const data = await response.json();
const randomUser = data.results[0];
---
<!-- Data fetched at build can be rendered in HTML -->
<h1>User</h1>
<h2>{randomUser.name.first} {randomUser.name.last}</h2>

<!-- Data fetched at build can be passed to components as props -->
<Contact client:load email={randomUser.email} />
<Location city={randomUser.location.city} />
```

----------------------------------------

TITLE: Installing Auth.js Integration with npm
DESCRIPTION: This command demonstrates how to add the `auth-astro` integration to your Astro project using the `npx astro add` command for npm, simplifying the setup process.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/authentication.mdx#_snippet_0

LANGUAGE: shell
CODE:
```
npx astro add auth-astro
```

----------------------------------------

TITLE: Defining Astro Action for Product Creation - TypeScript
DESCRIPTION: This TypeScript snippet defines an Astro action named `createProduct`. It accepts form data, simulates persisting it to a database, and returns the `id` of the newly created product. This action is designed to be called from an HTML form and its result used for subsequent operations like redirection.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/pl/guides/actions.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
import { defineAction } from 'astro:actions';
import { z } from 'astro:schema';

export const server = {
  createProduct: defineAction({
    accept: 'form',
    input: z.object({ /* ... */ }),
    handler: async (input) => {
      const product = await persistToDatabase(input);
      return { id: product.id };
    }
  })
}
```

----------------------------------------

TITLE: Understanding Astro Scoped Styles Compilation
DESCRIPTION: Illustrates how Astro automatically scopes CSS rules defined within a `<style>` tag by default. The example shows the original CSS and its compiled output, demonstrating the addition of unique data attributes to ensure styles apply only to the component's own HTML.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/styling.mdx#_snippet_1

LANGUAGE: astro
CODE:
```
<style>
  h1 {
    color: red;
  }

  .text {
    color: blue;
  }
</style>
```

LANGUAGE: astro
CODE:
```
<style>
  h1[data-astro-cid-hhnqfkh6] {
     color: red;
  }

  .text[data-astro-cid-hhnqfkh6] {
    color: blue;
  }
</style>
```

----------------------------------------

TITLE: Configuring an Astro Integration in `astro.config.mjs` (JavaScript)
DESCRIPTION: This JavaScript snippet illustrates how an Astro integration is typically configured within the `astro.config.mjs` file. It shows importing the integration as a default export and then adding an instance of it to the `integrations` array within the `defineConfig` object. This setup is crucial for Astro to recognize and apply the integration's functionalities during the build process, assuming the integration is a default export and a function.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/integrations-reference.mdx#_snippet_57

LANGUAGE: javascript
CODE:
```
// astro.config.mjs
import { defineConfig } from 'astro/config';
import example from 'example';

export default defineConfig({
  integrations: [example()]
})
```

----------------------------------------

TITLE: Defining a Basic Astro Layout Component
DESCRIPTION: This Astro component defines a basic site layout, including HTML structure, a navigation bar, and a footer. It uses Astro.props to accept a title for the page and includes a <slot /> where the content of individual pages will be injected. This component is conventionally placed in src/layouts.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/basics/layouts.mdx#_snippet_0

LANGUAGE: Astro
CODE:
```
---
// src/layouts/MySiteLayout.astro
import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/Footer.astro';
const { title } = Astro.props;
---
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <BaseHead title={title}/>
  </head>
  <body>
    <nav>
      <a href="#">Home</a>
      <a href="#">Posts</a>
      <a href="#">Contact</a>
    </nav>
    <h1>{title}</h1>
    <article>
      <slot /> <!-- your content is injected here -->
    </article>
    <Footer />
  </body>
  <style>
    h1 {
      font-size: 2rem;
    }
  </style>
</html>
```

----------------------------------------

TITLE: Defining Component Props in Astro
DESCRIPTION: This snippet defines the `Props` interface for the `MyCustomCardComponent.astro` using TypeScript, specifying `imagePath`, `altText`, `name`, and `age`. It then destructures these props from `Astro.props` to make them available for use within the component's script and template.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/recipes/dynamically-importing-images.mdx#_snippet_1

LANGUAGE: Astro
CODE:
```
---
import { Image } from 'astro:assets';

interface Props {
   imagePath: string;
   altText: string;
   name: string;
   age: number;
}

const { imagePath, altText, name, age } = Astro.props;
---
```

----------------------------------------

TITLE: Defining a Content Collection with Schema and Loader (TypeScript)
DESCRIPTION: `defineCollection()` is used in `src/content.config.ts` to configure a content collection. This example defines a 'blog' collection, specifying a `glob` loader to find Markdown files and a Zod schema for `title` and an optional `permalink` in the frontmatter. The defined collection is then exposed to Astro via `export const collections`.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/modules/astro-content.mdx#_snippet_1

LANGUAGE: ts
CODE:
```
import { z, defineCollection } from 'astro:content';
import { glob } from 'astro/loaders';

const blog = defineCollection({
  loader: glob({ pattern: '**/*.md', base: './src/data/blog' }),
  schema: z.object({
    title: z.string(),
    permalink: z.string().optional()
  })
});

// Expose your defined collection to Astro
// with the `collections` export
export const collections = { blog };
```

----------------------------------------

TITLE: Defining Blog Content Collection Schema in Astro
DESCRIPTION: This snippet defines a content collection named 'blog' in `src/content.config.ts` using `astro:content`. It specifies a schema for blog posts, including `title` (string), `author` (string), and `date` (Date object), ensuring data consistency for translated content.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/recipes/i18n.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
//src/content.config.ts
import { defineCollection, z } from 'astro:content';

const blogCollection = defineCollection({
  schema: z.object({
    title: z.string(),
    author: z.string(),
    date: z.date()
  })
});

export const collections = {
  'blog': blogCollection
};
```

----------------------------------------

TITLE: Running Astro Scripts with `npm` and Flags
DESCRIPTION: This example demonstrates how to execute `package.json` scripts using `npm run` while passing additional flags to the underlying Astro command. The `--` separator is crucial for `npm` to correctly forward flags like `--port 8080` (for the dev server) or `--verbose` (for build logs) to the `astro` command.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/cli-reference.mdx#_snippet_6

LANGUAGE: shell
CODE:
```
# run the dev server on port 8080 using the `dev` script in `package.json`
npm run dev -- --port 8080

# build your site with verbose logs using the `build` script in `package.json`
npm run build -- --verbose
```

----------------------------------------

TITLE: Displaying Current URL Properties in Astro
DESCRIPTION: This Astro component snippet demonstrates how to access and display different parts of the current request URL using `Astro.url`. It shows how to output the full URL, its pathname, and its origin directly within an Astro template.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/api-reference.mdx#_snippet_7

LANGUAGE: Astro
CODE:
```
<h1>The current URL is: {Astro.url}</h1>
<h1>The current URL pathname is: {Astro.url.pathname}</h1>
<h1>The current URL origin is: {Astro.url.origin}</h1>
```

----------------------------------------

TITLE: Creating a Basic Astro Layout Component
DESCRIPTION: This Astro layout component demonstrates the basic structure for an Astro page, including <html>, <head>, and <body> tags. It uses the <slot /> element to inject page-specific content, replacing Gatsby's {children} prop. This layout can be reused across multiple pages to maintain consistent HTML structure.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/migrate-to-astro/from-gatsby.mdx#_snippet_5

LANGUAGE: astro
CODE:
```
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <title>Astro</title>
  </head>
  <body>
    <!-- Wrap the slot element with your existing layout templating -->
    <slot />
  </body>
</html>
```

----------------------------------------

TITLE: Dynamically Combining Classes with `class:list` in Astro
DESCRIPTION: Shows how to use the `class:list` utility attribute in Astro files to dynamically combine CSS classes on an element based on component props or other conditions.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/styling.mdx#_snippet_4

LANGUAGE: astro
CODE:
```
---
const { isRed } = Astro.props;
---
<!-- If `isRed` is truthy, class will be "box red". -->
<!-- If `isRed` is falsy, class will be "box". -->
<div class:list={['box', { red: isRed }]}><slot /></div>

<style>
  .box { border: 1px solid blue; }
  .red { border-color: red; }
</style>
```

----------------------------------------

TITLE: Using Images in Astro Files
DESCRIPTION: This snippet demonstrates how to import and use local images, as well as reference images from the `public/` folder and remote URLs within an Astro component. It showcases both Astro's optimized `<Image />` component and the standard HTML `<img>` tag, illustrating the difference in processing for each method. The `<Image />` component automatically optimizes images, while `<img>` tags display them as-is.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/images.mdx#_snippet_0

LANGUAGE: Astro
CODE:
```
---
import { Image } from 'astro:assets';
import localBirdImage from '../../images/subfolder/localBirdImage.png';
---
<Image src={localBirdImage} alt="A bird sitting on a nest of eggs." />
<Image src="/images/bird-in-public-folder.jpg" alt="A bird." width="50" height="50" />
<Image src="https://example.com/remote-bird.jpg" alt="A bird." width="50" height="50" />

<img src={localBirdImage.src} alt="A bird sitting on a nest of eggs.">
<img src="/images/bird-in-public-folder.jpg" alt="A bird.">
<img src="https://example.com/remote-bird.jpg" alt="A bird.">
```

----------------------------------------

TITLE: Passing Props to an Imported Astro Component
DESCRIPTION: Shows how to import an Astro component (`GreetingHeadline`) into another component or page and pass data to it using attributes. Demonstrates passing both literal string values and variable values as props.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/basics/astro-components.mdx#_snippet_5

LANGUAGE: Astro
CODE:
```
---
// src/components/GreetingCard.astro
import GreetingHeadline from './GreetingHeadline.astro';
const name = 'Astro';
---
<h1>Greeting Card</h1>
<GreetingHeadline greeting="Hi" name={name} />
<p>I hope you have a wonderful day!</p>
```

----------------------------------------

TITLE: Handling User Registration Form Submission in Astro
DESCRIPTION: This JavaScript snippet, part of an Astro component's script, processes POST requests from a registration form. It retrieves form data, performs server-side validation for username, email, and password, and populates an 'errors' object. If no errors are found, it registers the user and redirects to the login page; otherwise, it logs any unexpected errors.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/recipes/build-forms.mdx#_snippet_6

LANGUAGE: JavaScript
CODE:
```
const errors = { username: "", email: "", password: "" };
if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    const name = data.get("username");
    const email = data.get("email");
    const password = data.get("password");
    if (typeof name !== "string" || name.length < 1) {
      errors.username += "Please enter a username. ";
    }
    if (typeof email !== "string" || !isValidEmail(email)) {
      errors.email += "Email is not valid. ";
    } else if (await isRegistered(email)) {
      errors.email += "Email is already registered. ";
    }
    if (typeof password !== "string" || password.length < 6) {
      errors.password += "Password must be at least 6 characters. ";
    }
    const hasErrors = Object.values(errors).some(msg => msg);
    if (!hasErrors) {
      await registerUser({name, email, password});
      return Astro.redirect("/login");
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}
```

----------------------------------------

TITLE: Updating Astro Home Page Heading
DESCRIPTION: This snippet illustrates how to modify the `<body>` section within `src/pages/index.astro` to update the main heading. It shows changing `<h1>Astro</h1>` to `<h1>My Astro Site</h1>`, demonstrating a direct content edit that, upon saving, will be immediately visible in the browser preview.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/tutorial/1-setup/3.mdx#_snippet_1

LANGUAGE: Astro
CODE:
```
<body>
  <h1>Astro</h1>
  <h1>My Astro Site</h1>
</body>
```

----------------------------------------

TITLE: Fetching Data and Accessing Cookies in a Server Island
DESCRIPTION: This Astro component, `Avatar.astro`, illustrates the capabilities of a server island. It fetches a user avatar URL by calling an asynchronous function `getUserAvatar` and accesses a user session cookie using `Astro.cookies.get`. This demonstrates that server islands can perform typical server-side operations, including data fetching and cookie access, similar to on-demand rendered pages.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/server-islands.mdx#_snippet_1

LANGUAGE: Astro
CODE:
```
--- import { getUserAvatar } from '../sessions';
const userSession = Astro.cookies.get('session');
const avatarURL = await getUserAvatar(userSession);
---
<img alt="User avatar" src={avatarURL} />
```

----------------------------------------

TITLE: Creating a New Astro Project
DESCRIPTION: These commands initiate a new Astro project using different package managers. The `create astro@latest` command launches Astro's CLI wizard, guiding the user to select an 'empty' project template, which is ideal for integrating an existing application like CRA.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/migrate-to-astro/from-create-react-app.mdx#_snippet_1

LANGUAGE: Shell
CODE:
```
npm create astro@latest
```

LANGUAGE: Shell
CODE:
```
pnpm create astro@latest
```

LANGUAGE: Shell
CODE:
```
yarn create astro@latest
```

----------------------------------------

TITLE: Accessing Component Props in Astro
DESCRIPTION: This Astro component demonstrates how to access `props` passed as component attributes using `Astro.props`. It destructures `title` and `date` from `Astro.props` and renders them within HTML elements.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/api-reference.mdx#_snippet_0

LANGUAGE: Astro
CODE:
```
---
```

LANGUAGE: Astro
CODE:
```
// src/components/Heading.astro
const { title, date } = Astro.props;
---
```

LANGUAGE: Astro
CODE:
```
<div>
  <h1>{title}</h1>
  <p>{date}</p>
</div>
```

----------------------------------------

TITLE: Calling Astro Actions Client-Side in Astro Component
DESCRIPTION: This example demonstrates how to import and invoke defined Astro Actions from the `astro:actions` module within a client-side `<script>` tag in an Astro component. It shows that an action call returns an object containing either `data` (for successful results) or `error` (for thrown exceptions).
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/actions.mdx#_snippet_1

LANGUAGE: astro
CODE:
```
<script>
import { actions } from 'astro:actions';

async () => {
  const { data, error } = await actions.myAction({ /* ... */ });
}
</script>
```

----------------------------------------

TITLE: Upgrading Astro and Integrations with @astrojs/upgrade (Shell)
DESCRIPTION: This command uses the `@astrojs/upgrade` utility to automatically update Astro and all its official integrations to their latest stable versions. It simplifies the upgrade process by handling multiple package updates simultaneously. This utility requires a package manager like npm, pnpm, or yarn to be installed.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/upgrade-astro.mdx#_snippet_0

LANGUAGE: shell
CODE:
```
# Upgrade Astro and official integrations together
npx @astrojs/upgrade
```

LANGUAGE: shell
CODE:
```
# Upgrade Astro and official integrations together
pnpm dlx @astrojs/upgrade
```

LANGUAGE: shell
CODE:
```
# Upgrade Astro and official integrations together
yarn dlx @astrojs/upgrade
```

----------------------------------------

TITLE: Using Astro Image Component with Local and Remote Sources
DESCRIPTION: This snippet demonstrates the correct usage of the Astro `Image` component. It shows how to use an ESM imported local image and a string URL for a remote image as the `src` property, which are the valid types for image sources.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/errors/expected-image.mdx#_snippet_0

LANGUAGE: Astro
CODE:
```
---
import { Image } from "astro:assets";
import myImage from "../assets/my_image.png";
---

<Image src={myImage} alt="..." />
<Image src="https://example.com/logo.png" width={300} height={300} alt="..." />
```

----------------------------------------

TITLE: Displaying Local Images with Astro's Image Component
DESCRIPTION: This snippet demonstrates how to import and use the `<Image />` component from `astro:assets` to display a local image. The `src` property points to the imported image, and `alt` is a mandatory attribute for accessibility. The component automatically optimizes the image and infers dimensions.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/images.mdx#_snippet_1

LANGUAGE: Astro
CODE:
```
--- 
// import the Image component and the image
import { Image } from 'astro:assets';
import myImage from '../assets/my_image.png'; // Image is 1600x900
---

<!-- `alt` is mandatory on the Image component -->
<Image src={myImage} alt="A description of my image." />
```

----------------------------------------

TITLE: Defining Astro Middleware `onRequest` Function
DESCRIPTION: This code defines an Astro middleware function using `defineMiddleware`. The `onRequest` function intercepts incoming requests, allowing for custom logic like checking the URL pathname and returning a JSON response or passing the request to the next handler.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/zh-cn/reference/integrations-reference.mdx#_snippet_4

LANGUAGE: js
CODE:
```
import { defineMiddleware } from 'astro:middleware';

export const onRequest = defineMiddleware(async (context, next) => {
  if(context.url.pathname === '/some-test-path') {
    return Response.json({
      ok: true
    });
  }

  return next();
});
```

----------------------------------------

TITLE: Toggling Cart Flyout State with Nanostores (Multi-Framework)
DESCRIPTION: These snippets illustrate how to update the `isCartOpen` atom from a button click across various UI frameworks. They demonstrate importing the `isCartOpen` store, reading its current value using framework-specific `useStore` hooks (or Svelte's `$`), and then toggling its state using the `.set()` method when the button is clicked.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/recipes/sharing-state-islands.mdx#_snippet_8

LANGUAGE: Preact
CODE:
```
// src/components/CartFlyoutToggle.jsx
import { useStore } from '@nanostores/preact';
import { isCartOpen } from '../cartStore';

export default function CartButton() {
  // read the store value with the `useStore` hook
  const $isCartOpen = useStore(isCartOpen);
  // write to the imported store using `.set`
  return (
    <button onClick={() => isCartOpen.set(!$isCartOpen)}>Cart</button>
  )
}
```

LANGUAGE: React
CODE:
```
// src/components/CartFlyoutToggle.jsx
import { useStore } from '@nanostores/react';
import { isCartOpen } from '../cartStore';

export default function CartButton() {
  // read the store value with the `useStore` hook
  const $isCartOpen = useStore(isCartOpen);
  // write to the imported store using `.set`
  return (
    <button onClick={() => isCartOpen.set(!$isCartOpen)}>Cart</button>
  )
}
```

LANGUAGE: Solid
CODE:
```
// src/components/CartFlyoutToggle.jsx
import { useStore } from '@nanostores/solid';
import { isCartOpen } from '../cartStore';

export default function CartButton() {
  // read the store value with the `useStore` hook
  const $isCartOpen = useStore(isCartOpen);
  // write to the imported store using `.set`
  return (
    <button onClick={() => isCartOpen.set(!$isCartOpen())}>Cart</button>
  )
}
```

LANGUAGE: Svelte
CODE:
```
<!--src/components/CartFlyoutToggle.svelte-->
<script>
  import { isCartOpen } from '../cartStore';
</script>

<!--use "$" to read the store value-->
<button on:click={() => isCartOpen.set(!$isCartOpen)}>Cart</button>
```

LANGUAGE: Vue
CODE:
```
<!--src/components/CartFlyoutToggle.vue-->
<template>
  <!--write to the imported store using `.set`-->
  <button @click="isCartOpen.set(!$isCartOpen)">Cart</button>
</template>

<script setup>
  import { isCartOpen } from '../cartStore';
  import { useStore } from '@nanostores/vue';

  // read the store value with the `useStore` hook
  const $isCartOpen = useStore(isCartOpen);
</script>
```

----------------------------------------

TITLE: Performing Client-Side Redirects with Astro.redirect (Astro)
DESCRIPTION: This Astro snippet shows how to perform a client-side redirect using `Astro.redirect()` within a component's frontmatter. It checks a user's login status and redirects them to a login page if they are not authenticated. For static routes, this generates a `<meta http-equiv="refresh">` tag.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/reference/api-reference.mdx#_snippet_18

LANGUAGE: astro
CODE:
```
import { isLoggedIn } from '../utils';

const cookie = Astro.request.headers.get('cookie');

// If the user is not logged in, redirect them to the login page
if (!isLoggedIn(cookie)) {
  return Astro.redirect('/login');
}
```

----------------------------------------

TITLE: Authorizing Astro Actions with ActionError in TypeScript
DESCRIPTION: This snippet demonstrates how to implement an authentication check within an Astro action handler. It uses `context.locals.user` to verify user authorization and throws an `ActionError` with the `UNAUTHORIZED` code if the user is not authenticated, preventing unauthorized access to the action's functionality.
SOURCE: https://github.com/withastro/docs/blob/main/src/content/docs/en/guides/actions.mdx#_snippet_29

LANGUAGE: TypeScript
CODE:
```
import { defineAction, ActionError } from 'astro:actions';

export const server = {
  getUserSettings: defineAction({
    handler: async (_input, context) => {
      if (!context.locals.user) {
        throw new ActionError({ code: 'UNAUTHORIZED' });
      }
      return { /* data on success */ };
    }
  })
}
```